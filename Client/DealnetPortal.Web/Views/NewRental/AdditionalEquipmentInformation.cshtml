@model DealnetPortal.Web.Models.EquipmentInformation.ContactAndPaymentInfoViewModelNew

@{
    if (Model?.ExistingEquipment != null && !Model.ExistingEquipment.Any())
    {
      Model.ExistingEquipment = null;
    }
    var yesNaming = Resources.Yes;
    var noNaming = Resources.No;
}

<div id="label-steps">
  <div class="dealnet-action-link">@Resources.NewApplication</div> >
</div>

<div class="dealnet-large-header">Additional Contract Information</div>

<div id="steps-line"></div>
<div class="row" id="steps">
  <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
    @if (Model.IsApplicantsInfoEditAvailable)
    {
      <a href="@Url.Action("BasicInfo", "NewRental", new {contractId = Model.ContractId})" data-warning="true" id="step1" class="step-item">1</a>
    }
    else
    {
      <div id="step1" class="step-item">1</div>
    }
  </div>

  <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
    <a href="@Url.Action("EquipmentInformation", new {contractId = Model.ContractId})" id="step2" class="step-item">2</a>

    <div id="step3" class="step-item step-active">3</div>
  </div>
	<div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
		<div id="step4" class="step-item">4</div>
	</div>
	<div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
		<div id="step5" class="step-item">5</div>
	</div>
</div>

<div class="form-container">
  <div class="form-section">
  @using (Html.BeginForm("AdditionalEquipmentInformation", "NewRental", null, FormMethod.Post, new {id = "equipment-form"}))
  {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ContractId)
    @Html.HiddenFor(model => model.AgreementType)

    <div class="row">
      <div class="col-md-4">
        <div class="form-group">
          @Html.LabelFor(m => m.SalesRep)
          <div class="control-group">
            @Html.TextBoxFor(m => m.SalesRep, new {@class = "form-control dealnet-input", placeholder = Resources.SalesRep})
            @Html.ValidationMessageFor(m => m.SalesRep, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="form-group">
          @Html.LabelFor(m => m.EstimatedInstallationDate)
          <div class="control-group date-group">
            @Html.TextBoxFor(m => m.EstimatedInstallationDate, @"{0:MM'/'dd'/'yyyy}", new {@class = "form-control dealnet-input date-input", id = "estimated-installation-date", placeholder = Resources.InstallationDate, data_val_date = ""})
            @Html.ValidationMessageFor(m => m.EstimatedInstallationDate, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
      <div class="col-md-2">
        <div class="form-group">
          @Html.LabelFor(m => m.HouseSize)
          <div class="control-group">
            @Html.TextBoxFor(m => m.HouseSize, new {@class = "form-control dealnet-input", placeholder = Resources.HouseSize})
            @Html.ValidationMessageFor(m => m.HouseSize, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
    </div>
    <div class="equipment-editable-section">
      <div id="existing-equipments">
        <h3 class="dealnet-middle-header">@Resources.ExistingEquipmentInformation</h3>
        @if (Model?.ExistingEquipment != null)
        {
          for (var i = 0; i < Model.ExistingEquipment.Count; i++)
          {
            <div id="existing-equipment-@(i)">
              <div class="dealnet-middle-header equipment-number-header">
                <span class="equipment-number">№@(i + 1)</span>
                <div id="existing-equipment-remove-@(i)" class="additional-remove" onclick="removeExistingEquipment(@(i));">
                  <i class="glyphicon glyphicon-remove"></i>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6">
                  <div class="row">
                    <div class="col-sm-4">
                      <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[i].IsRental)
                        <div class="control-group">
                          @Html.DropDownListFor(m => m.ExistingEquipment[i].IsRental, new SelectList(
                            new[]
                            {
                              new {Value = "true", Text = yesNaming, Selected = Model?.ExistingEquipment != null && Model.ExistingEquipment[i].IsRental},
                              new {Value = "false", Text = noNaming, Selected = Model?.ExistingEquipment != null && !Model.ExistingEquipment[i].IsRental},
                            },
                            "Value", "Text", Model?.ExistingEquipment != null ? Model.ExistingEquipment[i].IsRental : true), new {@class = "form-control"})
                        </div>
                      </div>
                    </div>
                    <div class="col-sm-8">
                      <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[i].RentalCompany)
                        <div class="control-group">
                          @Html.TextBoxFor(m => m.ExistingEquipment[i].RentalCompany, new {@class = "form-control dealnet-input", placeholder = Resources.RentalCompany})
                          @Html.ValidationMessageFor(m => m.ExistingEquipment[i].RentalCompany, "", new {@class = "text-danger"})
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="row">
                    <div class="col-sm-4">
                      <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[i].EstimatedAge)
                        <div class="control-group">
                          @Html.TextBoxFor(m => m.ExistingEquipment[i].EstimatedAge, new {@class = "form-control dealnet-input", type = "text", placeholder = Resources.Years})
                          @Html.ValidationMessageFor(m => m.ExistingEquipment[i].EstimatedAge, "", new {@class = "text-danger"})
                        </div>
                      </div>
                    </div>
                    <div class="col-sm-8">
                      <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[i].Make)
                        <div class="control-group">
                          @Html.TextBoxFor(m => m.ExistingEquipment[i].Make, new {@class = "form-control dealnet-input", placeholder = Resources.Make})
                          @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Make, "", new {@class = "text-danger"})
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    @Html.LabelFor(m => m.ExistingEquipment[i].Model)
                    <div class="control-group">
                      @Html.TextBoxFor(m => m.ExistingEquipment[i].Model, new {@class = "form-control dealnet-input", placeholder = Resources.Model})
                      @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Model, "", new {@class = "text-danger"})
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    @Html.LabelFor(m => m.ExistingEquipment[i].SerialNumber)
                    <div class="control-group">
                      @Html.TextBoxFor(m => m.ExistingEquipment[i].SerialNumber, new {@class = "form-control dealnet-input", placeholder = Resources.SerialNumber})
                      @Html.ValidationMessageFor(m => m.ExistingEquipment[i].SerialNumber, "", new {@class = "text-danger"})
                    </div>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    @Html.LabelFor(m => m.ExistingEquipment[i].GeneralCondition)
                    <div class="control-group">
                      @Html.TextBoxFor(m => m.ExistingEquipment[i].GeneralCondition, new {@class = "form-control dealnet-input", placeholder = Resources.GeneralCondition})
                      @Html.ValidationMessageFor(m => m.ExistingEquipment[i].GeneralCondition, "", new {@class = "text-danger"})
                    </div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    @Html.LabelFor(m => m.ExistingEquipment[i].Notes)
                    <div class="control-group">
                      @Html.TextAreaFor(m => m.ExistingEquipment[i].Notes, new {@class = "form-control textarea-input-height", placeholder = Resources.Notes})
                      @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Notes, "", new {@class = "text-danger"})
                    </div>
                  </div>
                </div>
              </div>
            </div>
          }
        }
      </div>

      <div class="align-middle dealnet-info-link add-equip-link" onclick="addExistingEquipment()">
        <svg aria-hidden="true" class="icon icon-add-app"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-add-app")"></use></svg>
        <span>@Resources.AddAdditionalEquipment</span>
      </div>
    </div>
    <div class="row">
    </div>
    <h3 class="dealnet-middle-header">@Resources.ContractNotes</h3>
    <div class="row">
      <div class="col-md-6">
        <div class="form-group">
          <div class="control-group">
            @Html.TextAreaFor(m => m.Notes, new {@class = "form-control", placeholder = Resources.Notes})
            @Html.ValidationMessageFor(m => m.Notes, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <div class="button-proceed">
          <input type="submit" value="@Resources.SaveAndProceed" class="btn dealnet-button dealnet-success-button"/>
        </div>
      </div>
    </div>
  }
  </div>
</div>

<div class="hidden">
  <div id="existing-equipment-base">
    <div class="dealnet-middle-header equipment-number-header">
      <span class="equipment-number">№1</span>
      <div id="existing-equipment-remove-0" class="additional-remove" onclick="removeExistingEquipment(0);">
        <i class="glyphicon glyphicon-remove"></i>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div class="row">
          <div class="col-sm-4">
            <div class="form-group">
              @Html.LabelFor(m => m.ExistingEquipment[0].IsRental)
              <div class="control-group">
                @Html.DropDownListFor(m => m.ExistingEquipment[0].IsRental, new SelectList(
                  new[]
                  {
                    new {Value = "true", Text = yesNaming, Selected = Model?.ExistingEquipment != null && Model.ExistingEquipment[0].IsRental},
                    new {Value = "false", Text = noNaming, Selected = Model?.ExistingEquipment != null && !Model.ExistingEquipment[0].IsRental},
                  },
                  "Value", "Text", Model?.ExistingEquipment != null ? Model.ExistingEquipment[0].IsRental : true), new {@class = "form-control"})
              </div>
            </div>
          </div>
          <div class="col-sm-8">
            <div class="form-group">
              @Html.LabelFor(m => m.ExistingEquipment[0].RentalCompany)
              <div class="control-group">
                @Html.TextBoxFor(m => m.ExistingEquipment[0].RentalCompany, new {@class = "form-control dealnet-input", placeholder = Resources.RentalCompany})
                @Html.ValidationMessageFor(m => m.ExistingEquipment[0].RentalCompany, "", new {@class = "text-danger"})
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="row">
          <div class="col-sm-4">
            <div class="form-group">
              @Html.LabelFor(m => m.ExistingEquipment[0].EstimatedAge)
              <div class="control-group">
                @Html.TextBoxFor(m => m.ExistingEquipment[0].EstimatedAge, new {@class = "form-control dealnet-input", type = "text", placeholder = Resources.Years})
                @Html.ValidationMessageFor(m => m.ExistingEquipment[0].EstimatedAge, "", new {@class = "text-danger"})
              </div>
            </div>
          </div>
          <div class="col-sm-8">
            <div class="form-group">
              @Html.LabelFor(m => m.ExistingEquipment[0].Make)
              <div class="control-group">
                @Html.TextBoxFor(m => m.ExistingEquipment[0].Make, new {@class = "form-control dealnet-input", placeholder = Resources.Make})
                @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Make, "", new {@class = "text-danger"})
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div class="form-group">
          @Html.LabelFor(m => m.ExistingEquipment[0].Model)
          <div class="control-group">
            @Html.TextBoxFor(m => m.ExistingEquipment[0].Model, new {@class = "form-control dealnet-input", placeholder = Resources.Model})
            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Model, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="form-group">
          @Html.LabelFor(m => m.ExistingEquipment[0].SerialNumber)
          <div class="control-group">
            @Html.TextBoxFor(m => m.ExistingEquipment[0].SerialNumber, new {@class = "form-control dealnet-input", placeholder = Resources.SerialNumber})
            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].SerialNumber, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-6">
        <div class="form-group">
          @Html.LabelFor(m => m.ExistingEquipment[0].GeneralCondition)
          <div class="control-group">
            @Html.TextBoxFor(m => m.ExistingEquipment[0].GeneralCondition, new {@class = "form-control dealnet-input", placeholder = Resources.GeneralCondition})
            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].GeneralCondition, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
      <div class="col-md-6">
        <div class="form-group">
          @Html.LabelFor(m => m.ExistingEquipment[0].Notes)
          <div class="control-group">
            @Html.TextAreaFor(m => m.ExistingEquipment[0].Notes, new {@class = "form-control textarea-input-height", placeholder = Resources.Notes})
            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Notes, "", new {@class = "text-danger"})
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@section Translations
{
    translations['EnterValidDate'] = "@Resources.EnterValidDate";
}

<link href="https://code.jquery.com/ui/1.12.0/themes/base/jquery-ui.css" rel="stylesheet">
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/localization")
@Scripts.Render("~/bundles/additional-equipment-information")

@section scripts
{
  <script type="text/javascript">
    $(document)
      .ready(function () {
        sessionStorage.existingEquipmets = @(Model.ExistingEquipment == null || !Model.ExistingEquipment.Any() ? 0 : Model.ExistingEquipment.Count);
      });
  </script>
}

