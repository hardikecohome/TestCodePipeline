@model DealnetPortal.Web.Models.ContactAndPaymentInfoViewModel

<div id="label-steps">
    <div class="dealnet-action-link">@Resources.NewApplication</div> >
</div>


<div class="dealnet-large-header">@Resources.ContactAndPaymentInfo</div>

<div id="steps-line"></div>
<div class="row" id="steps">
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <a href="@Url.Action("BasicInfo", new { contractId = Model.ContractId })" data-warning="true" id="step1" class="step-item">1</a>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <a href="@Url.Action("CreditCheckConfirmation", new { contractId = Model.ContractId })" data-warning="true" id="step2" class="step-item">2</a>

        <a href="@Url.Action("EquipmentInformation", new { contractId = Model.ContractId })" id="step3" class="step-item">3</a>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div id="step4" class="step-item step-active">4</div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <div id="step5" class="step-item">5</div>
    </div>
</div>
<div class="form-container">
<div class="form-section">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ContractId)
        <h3 class="dealnet-middle-header">@Resources.ContactInformation</h3>

        <h4 class="dealnet-small-header2">@Resources.HomeOwnerInformation</h4>
        @Html.HiddenFor(m => m.HomeOwnerContactInfo.CustomerId)
        <div class="row mandatory-phones">
            <div class="col-md-4 col-lg-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.HomeOwnerContactInfo.HomePhone)
                    <div class="control-group">
                        @Html.TextBoxFor(m => m.HomeOwnerContactInfo.HomePhone, new {@class = "form-control dealnet-input home-phone", placeholder = Resources.HomePhone })
                        @Html.ValidationMessageFor(m => m.HomeOwnerContactInfo.HomePhone, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            <div class="col-md-4 col-lg-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.HomeOwnerContactInfo.CellPhone)
                    <div class="control-group">
                        @Html.TextBoxFor(m => m.HomeOwnerContactInfo.CellPhone, new {@class = "form-control dealnet-input cell-phone", placeholder = Resources.CellPhone })
                        @Html.ValidationMessageFor(m => m.HomeOwnerContactInfo.CellPhone, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            <div class="col-md-4 col-lg-4">
                <div class="form-group">
                    @Html.LabelFor(m => m.HomeOwnerContactInfo.BusinessPhone)
                    <div class="control-group">
                        @Html.TextBoxFor(m => m.HomeOwnerContactInfo.BusinessPhone, new {@class = "form-control dealnet-input", id = "business-phone", placeholder = Resources.BusinessPhone })
                        @Html.ValidationMessageFor(m => m.HomeOwnerContactInfo.BusinessPhone, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HomeOwnerContactInfo.EmailAddress)
                    <div class="control-group">
                        @Html.TextBoxFor(m => m.HomeOwnerContactInfo.EmailAddress, new {@class = "form-control dealnet-input", id = "email-address", placeholder = Resources.EmailAddress, type = "email"})
                        @Html.ValidationMessageFor(m => m.HomeOwnerContactInfo.EmailAddress, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.HouseSize)
                    <div class="control-group">
                        @Html.TextBoxFor(m => m.HouseSize, new {@class = "form-control dealnet-input", id = "house-size", placeholder = Resources.HouseSizeSquareFeet })
                        @Html.ValidationMessageFor(m => m.HouseSize, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>

        <label class="align-middle custom-checkbox set-margin">
            @Html.CheckBoxFor(m => m.HomeOwnerContactInfo.AllowCommunicate, new { @class = "dealnet-checkbox" })
            @*<input type="checkbox" class="dealnet-checkbox"/>*@
            <span class="checkbox-icon"><svg aria-hidden="true" class="icon icon-checked"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-checked")"></use></svg></span>
            <span>@Resources.WishToReceiveEmailsAndMessages</span>
        </label>
        if (Model.CoBorrowersContactInfo?.Any() ?? false)
        {
            for (int i = 0; i < Model.CoBorrowersContactInfo.Count; i++)
            {
                <hr>
                <h4 class="dealnet-small-header2">@Resources.AdditionalApplicant (@Model.CoBorrowersContactInfo[i].FirstName @Model.CoBorrowersContactInfo[i].LastName) @Resources.Information</h4>
                @Html.HiddenFor(m => m.CoBorrowersContactInfo[i].CustomerId)
                <div class="row mandatory-phones">
                    <div class="col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CoBorrowersContactInfo[i].HomePhone)
                            <div class="control-group">
                                @Html.TextBoxFor(m => m.CoBorrowersContactInfo[i].HomePhone, new { @class = "form-control dealnet-input home-phone", placeholder = Resources.HomePhone })
                                @Html.ValidationMessageFor(m => m.CoBorrowersContactInfo[i].HomePhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CoBorrowersContactInfo[i].CellPhone)
                            <div class="control-group">
                                @Html.TextBoxFor(m => m.CoBorrowersContactInfo[i].CellPhone, new { @class = "form-control dealnet-input cell-phone", placeholder = Resources.CellPhone })
                                @Html.ValidationMessageFor(m => m.CoBorrowersContactInfo[i].CellPhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CoBorrowersContactInfo[i].BusinessPhone)
                            <div class="control-group">
                                @Html.TextBoxFor(m => m.CoBorrowersContactInfo[i].BusinessPhone, new { @class = "form-control dealnet-input", id = "business-phone", placeholder = Resources.BusinessPhone })
                                @Html.ValidationMessageFor(m => m.CoBorrowersContactInfo[i].BusinessPhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CoBorrowersContactInfo[i].EmailAddress)
                            <div class="control-group">
                                @Html.TextBoxFor(m => m.CoBorrowersContactInfo[i].EmailAddress, new {@class = "form-control dealnet-input", id = "email-address", placeholder = Resources.EmailAddress, type = "email"})
                                @Html.ValidationMessageFor(m => m.CoBorrowersContactInfo[i].EmailAddress, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
                </div>
                <label class="align-middle custom-checkbox set-margin">
                    @*<input type="checkbox" class="dealnet-checkbox"/>*@
                    @Html.CheckBoxFor(m => m.CoBorrowersContactInfo[i].AllowCommunicate, new { @class = "dealnet-checkbox" })
                    <span class="checkbox-icon"><svg aria-hidden="true" class="icon icon-checked"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-checked")"></use></svg></span>
                    <span>@Resources.WishToReceiveEmailsAndMessages</span>
                </label>
            }
        }

        <h3 class="dealnet-middle-header">@Resources.PaymentInformation</h3>

        <div class="row">
            <div class="col-md-6 col-lg-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.PaymentInfo.PaymentType)
                    <div class="control-group">
                        @Html.EnumDropDownListFor(m => m.PaymentInfo.PaymentType, null, new {@class = "form-control", id = "payment-type"})
                        @Html.ValidationMessageFor(m => m.PaymentInfo.PaymentType, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-6 pap-payment">
                <div class="form-group">
                    @Html.LabelFor(m => m.PaymentInfo.PrefferedWithdrawalDate)
                    <div class="control-group">
                        @Html.EnumDropDownListFor(m => m.PaymentInfo.PrefferedWithdrawalDate, null, new {@class = "form-control", id = "preferred-withdrawal-date"})
                        @Html.ValidationMessageFor(m => m.PaymentInfo.PrefferedWithdrawalDate, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>

        @*<div class="row">
            <div class="col-xs-12 col-md-3 col-lg-3">
                <div class="form-group">
                    @Html.Label("owner-upload-file", Resources.PhotoOfVoidCheque)
                    <div class="control-group">
                        <div class="file-upload btn dealnet-button dealnet-success-button" @if (!ViewBag.IsMobileRequest){ <text>data-toggle="modal" data-target="#camera-modal"</text> } >
                            <svg aria-hidden="true" class="icon icon-scan-licence"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-scan-licence")"></use></svg>
                            <span>@Resources.AddPhoto</span>
                            @if (ViewBag.IsMobileRequest)
                            {
                            <input type="file" accept="image/*" class="upload" id="owner-upload-file" onchange="submitUpload(this, '@Url.Action("RecognizeVoidChequePhoto", "NewRental")', 'first-name', 'last-name', 'birth-date', true)" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>*@

        <div class="pap-payment">
            <div class="row">
                <div class="col-md-6 col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.PaymentInfo.BlankNumber)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.PaymentInfo.BlankNumber, new {@class = "form-control dealnet-input", id = "bank-number", placeholder = Resources.BlankNumber})
                            @Html.ValidationMessageFor(m => m.PaymentInfo.BlankNumber, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.PaymentInfo.TransitNumber)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.PaymentInfo.TransitNumber, new {@class = "form-control dealnet-input", id = "transit-number", placeholder = Resources.TransitNumber })
                            @Html.ValidationMessageFor(m => m.PaymentInfo.TransitNumber, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.PaymentInfo.AccountNumber)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.PaymentInfo.AccountNumber, new {@class = "form-control dealnet-input", id = "account-number", placeholder = Resources.AccountNumber })
                            @Html.ValidationMessageFor(m => m.PaymentInfo.AccountNumber, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="enbridge-payment">
            <div class="row">
                <div class="col-md-6 col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.PaymentInfo.EnbridgeGasDistributionAccount)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.PaymentInfo.EnbridgeGasDistributionAccount, new {@class = "form-control dealnet-input", id = "enbridge-gas-distribution-account", placeholder = Resources.TwelveDigitsNumber })
                            @Html.ValidationMessageFor(m => m.PaymentInfo.EnbridgeGasDistributionAccount, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.PaymentInfo.MeterNumber)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.PaymentInfo.MeterNumber, new {@class = "form-control dealnet-input", id = "meter-number", placeholder = Resources.SevenDigitsNumber })
                            @Html.ValidationMessageFor(m => m.PaymentInfo.MeterNumber, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row" id="saveproceed-button">
            <div class="col-xs-12 col-md-3 col-lg-3">
                <button class="btn dealnet-button dealnet-success-button">
                    @Resources.SaveAndProceed
                </button>
            </div>
        </div>
    }
</div>
</div>

@*@if (!ViewBag.IsMobileRequest)
{
    <div class="modal fade" id="camera-modal" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <div class="dealnet-middle-header">@Resources.ScanVoidCheque</div>
                    <div class="dealnet-middle-header-2" id="you-want">@Resources.SelectScanningMethod</div>

                    <ul class="nav nav-tabs" role="tablist">
                        <li id="foldit" role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">@Resources.UseCamera</a></li>
                        <li id="foldit" role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">@Resources.Upload</a></li>
                    </ul>

                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane fade in active" id="home">
                            <div id="capture-area">
                                <video autoplay class="capture-frame" id="video"></video>
                                <canvas id="capture-canvas" class="capture-frame"></canvas>
                                <canvas id="big-capture-canvas"></canvas>
                                <div id="capture-buttons">
                                    <input type="button" class="btn dealnet-button dealnet-success-button big-button" id="capture-buttons-1" value="Capture" onclick="takePhoto()"/>
                                    <div id="capture-buttons-2">
                                        <input type="button" class="btn dealnet-button dealnet-success-button big-button" id="upload-capture" value="Save" onclick="uploadCaptured('@Url.Action("RecognizeVoidCheque", "NewRental")')"/>
                                        <div id="retake" onclick="retakePhoto()">@Resources.Retake</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane fade" id="profile">
                            <div id="upload-area">
                                <div id="upload-buttons">
                                    <div class="file-upload btn dealnet-button dealnet-success-button" id="upload-file-button">
                                        <svg aria-hidden="true" class="icon icon-cloud-upload"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-cloud-upload")"></use></svg>
                                        <span>@Resources.UploadPhoto</span>
                                        <input type="file" class="upload" id="upload-file" onchange="submitUpload(this, '@Url.Action("RecognizeVoidChequePhoto", "NewRental")')"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}*@

@section Translations
{
    translations['ProcessingImage'] = "@Resources.ProcessingImage";
    translations['BrowserNotSupportFileUpload'] = "@Html.Raw(Resources.BrowserNotSupportFileUpload)";
    translations['CannotRecognizeVoidCheque'] = "@Html.Raw(Resources.CannotRecognizeVoidCheque)";
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/contact-and-payment")
}

