@using DealnetPortal.Api.Models.Contract
@model DealnetPortal.Web.Models.EquipmentInformation.EquipmentInformationViewModel

@{
    if (Model?.ExistingEquipment != null && !Model.ExistingEquipment.Any())
    {
        Model.ExistingEquipment = null;
    }
}

<div id="label-steps">
    <div class="dealnet-action-link">New Application</div> >
</div>
<div class="dealnet-large-header">Equipment Information</div>
<div id="steps-line"></div>
<div class="row" id="steps">
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <a href="@Url.Action("BasicInfo", new { contractId = Model.ContractId })" data-warning="true" class="step-item">1</a>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        <a href="@Url.Action("CreditCheckConfirmation", new { contractId = Model.ContractId })" data-warning="true" id="step2" class="step-item">2</a>

        <div id="step3" class="step-item step-active">3</div>
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        @if (Model.IsAllInfoCompleted)
        {
            <a href="@Url.Action("ContactAndPaymentInfo", new {contractId = Model.ContractId})" id="step4" class="step-item">4</a>
        }
        else
        {
            <div id="step4" class="step-item">4</div>
        }
    </div>
    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
        @if (Model.IsAllInfoCompleted)
        {
            <a href="@Url.Action("SummaryAndConfirmation", new {contractId = Model.ContractId})" id="step5" class="step-item">5</a>
        }
        else
        {
            <div id="step5" class="step-item">5</div>
        }
    </div>
</div>
<div class="form-container equipment-form-container">
<div class="form-section">
<div class="row">
    <div class="col-md-12">
        <p class="align-middle equipment-proceed-success">    
            <svg aria-hidden="true" class="icon icon-success"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-success")"></use></svg>
            <span>Credit Check Processed Successfully!</span>
        </p>   
        <p>Pre-Approved for $@($"{TempData["MaxCreditAmount"]:0,00}")</p>     
    </div>
</div>


@using (Html.BeginForm("EquipmentInformation", "NewRental", null, FormMethod.Post, new { id = "equipment-form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ContractId)
    <div class="form-group">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(m => m.AgreementType)
                @Html.EnumDropDownListFor(m => m.AgreementType, null, new { @class = "form-control", id = "agreement-type" })
            </div>
        </div>        
    </div>

    <div id="new-equipments">
        <h3 class="dealnet-middle-header">New Equipment Information</h3>
        <div id="new-equipment-base" class="new-equipment">
            <div class="dealnet-middle-header owner-info-label">№1
                <div id="new-equipment-remove-0" class="additional-remove" onclick="$('#new-equipment-0').remove(); recalculateTotalMonthlyPayment();"><i class="glyphicon glyphicon-remove"></i>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewEquipment[0].Type)
                        @Html.DropDownListFor(m => m.NewEquipment[0].Type,
                            ((IList<EquipmentTypeDTO>) ViewBag.EquipmentTypes).Select(x => new SelectListItem {Value = x.Description, Text = x.Description, Selected = Model?.NewEquipment != null && Model.NewEquipment[0]?.Type == x.Description }),
                            new {@class = "form-control"})
                    </div>
                </div>
                <div class="col-xs-12 col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewEquipment[0].Description)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.NewEquipment[0].Description, new {@class = "form-control dealnet-input", placeholder = "Description"})
                            @Html.ValidationMessageFor(m => m.NewEquipment[0].Description, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewEquipment[0].Cost)
                        <div class="control-group has-addon-left">
                            <div class="control-group-addon">$</div>
                            @Html.TextBoxFor(m => m.NewEquipment[0].Cost, new { @class = "form-control dealnet-input equipment-cost", placeholder = "Cost" })
                            @Html.ValidationMessageFor(m => m.NewEquipment[0].Cost, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewEquipment[0].MonthlyCost)
                        <div class="control-group has-addon-left">
                            <div class="control-group-addon">$</div>
                            @Html.TextBoxFor(m => m.NewEquipment[0].MonthlyCost, new { @class = "form-control dealnet-input monthly-cost", placeholder = "Monthly Cost", onchange = "recalculateTotalMonthlyPayment();" })
                            @Html.ValidationMessageFor(m => m.NewEquipment[0].MonthlyCost, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewEquipment[0].EstimatedInstallationDate, new { @for = "estimated-installation-date-0" })
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.NewEquipment[0].EstimatedInstallationDate, @"{0:MM'/'dd'/'yyyy}", new { @class = "form-control dealnet-input", id = "estimated-installation-date-0", placeholder = "mm/dd/yyyy", data_val_date = "Date must be in range 1900 - Today" })
                            @Html.ValidationMessageFor(m => m.NewEquipment[0].EstimatedInstallationDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (Model?.NewEquipment != null && Model.NewEquipment.Count > 1)
        {
            for (var i = 1; i < Model.NewEquipment.Count; i++)
            {
                <div id="new-equipment-@(i)" class="new-equipment">
                    <div class="dealnet-middle-header owner-info-label">
                        №@(i+1)
                        <div id="new-equipment-remove-c" class="additional-remove" onclick="$('#new-equipment-@(i)').remove();">
                            <i class="glyphicon glyphicon-remove"></i>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NewEquipment[i].Type)
                                @Html.DropDownListFor(m => m.NewEquipment[i].Type,
                        ((IList<EquipmentTypeDTO>)ViewBag.EquipmentTypes).Select(x => new SelectListItem { Value = x.Description, Text = x.Description, Selected = Model?.NewEquipment != null && Model.NewEquipment[i]?.Type == x.Description }),
                        new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NewEquipment[i].Description)
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.NewEquipment[i].Description, new { @class = "form-control dealnet-input", placeholder = "Description" })
                                    @Html.ValidationMessageFor(m => m.NewEquipment[i].Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NewEquipment[i].Cost)
                                <div class="control-group has-addon-left">
                                    <div class="control-group-addon">$</div>
                                    @Html.TextBoxFor(m => m.NewEquipment[i].Cost, new { @class = "form-control dealnet-input equipment-cost", placeholder = "Cost" })
                                    @Html.ValidationMessageFor(m => m.NewEquipment[i].Cost, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NewEquipment[i].MonthlyCost)
                                <div class="control-group has-addon-left">
                                    <div class="control-group-addon">$</div>
                                    @Html.TextBoxFor(m => m.NewEquipment[i].MonthlyCost, new { @class = "form-control dealnet-input monthly-cost", placeholder = "Monthly Cost", onchange = "recalculateTotalMonthlyPayment();" })
                                    @Html.ValidationMessageFor(m => m.NewEquipment[i].MonthlyCost, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.NewEquipment[i].EstimatedInstallationDate, new { @for = "estimated-installation-date-" + i })
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.NewEquipment[i].EstimatedInstallationDate, @"{0:MM'/'dd'/'yyyy}", new { @class = "form-control dealnet-input", id = "estimated-installation-date-" + i, placeholder = "mm/dd/yyyy", data_val_date = "Date must be in range 1900 - Today" })
                                    @Html.ValidationMessageFor(m => m.NewEquipment[i].EstimatedInstallationDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="row">
        <div class="col-md-12">            
            <div class="align-middle dealnet-info-link add-equip-link" onclick="addNewEquipment(); recalculateTotalMonthlyPayment();">
                <svg aria-hidden="true" class="icon icon-add-app"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-add-app")"></use></svg>
                <span>Add additional equipment</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">                
                @Html.LabelFor(m => m.TotalMonthlyPayment)
                <div class="control-group has-addon-left">
                    <div class="control-group-addon">$</div>                  
                    @Html.TextBoxFor(m => m.TotalMonthlyPayment, new { @class = "form-control dealnet-input", id="total-monthly-payment", placeholder = "Total Monthly Payment"})
                    @Html.ValidationMessageFor(m => m.TotalMonthlyPayment, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>


    <h3 class="dealnet-middle-header">Term and Rep</h3>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.RequestedTerm)
                <div class="control-group">
                    @Html.TextBoxFor(m => m.RequestedTerm, new {@class = "form-control dealnet-input", placeholder = "Requested Term"})
                    @Html.ValidationMessageFor(m => m.RequestedTerm, "", new {@class = "text-danger"})
                </div>              
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.SalesRep)
                <div class="control-group">
                    @Html.TextBoxFor(m => m.SalesRep, new {@class = "form-control dealnet-input", placeholder = "Sales Rep"})
                    @Html.ValidationMessageFor(m => m.SalesRep, "", new {@class = "text-danger"})
                </div>               
            </div>
        </div>
    </div>
    
    <div id="existing-equipments">
        <h3 class="dealnet-middle-header">Existing Equipment Information</h3>
        <div id="existing-equipment-base">
            <div class="dealnet-middle-header owner-info-label">
                №1
                <div id="existing-equipment-remove-0" class="additional-remove" onclick="$('#existing-equipment-0').remove();">
                    <i class="glyphicon glyphicon-remove"></i>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4 col-md-2 col-lg-2">
                    <div class="form-group">
                        @Html.Label("payment-type", "Is Rental?", new { @class = "" })
                        <div class="control-group">
                            @Html.DropDownListFor(m => m.ExistingEquipment[0].IsRental, new SelectList(
                                new[]
                                {
                                    new {Value = "true", Text = "Yes", Selected = Model?.ExistingEquipment != null && Model.ExistingEquipment[0].IsRental},
                                    new {Value = "false", Text = "No", Selected = Model?.ExistingEquipment != null && !Model.ExistingEquipment[0].IsRental},
                                },
                                "Value", "Text", Model?.ExistingEquipment != null ? Model.ExistingEquipment[0].IsRental : true), new {@class = "form-control", id = "payment-type"})
                                @*"Value", "Text", Model), new {@class = "form-control", id = "payment-type"})*@
                        </div>
                    </div>
                </div>
                <div class="col-sm-8 col-md-4 col-lg-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].RentalCompany)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].RentalCompany, new {@class = "form-control dealnet-input", placeholder = "Rental Company"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].RentalCompany, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-3 col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].EstimatedAge)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].EstimatedAge, new {@class = "form-control dealnet-input", placeholder = "Years"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].EstimatedAge, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class=" col-sm-12 col-md-3 col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].Make)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].Make, new {@class = "form-control dealnet-input", placeholder = "Make"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Make, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>

                <div class="col-sm-12 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].Model)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].Model, new {@class = "form-control dealnet-input", placeholder = "Model"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Model, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].SerialNumber)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].SerialNumber, new {@class = "form-control dealnet-input", placeholder = "Serial Number"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].SerialNumber, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExistingEquipment[0].GeneralCondition)
                        <div class="control-group">
                            @Html.TextBoxFor(m => m.ExistingEquipment[0].GeneralCondition, new {@class = "form-control dealnet-input", placeholder = "General Condition"})
                            @Html.ValidationMessageFor(m => m.ExistingEquipment[0].GeneralCondition, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
                    <div class="col-sm-12 col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ExistingEquipment[0].Notes)
                            <div class="control-group">
                                @Html.TextAreaFor(m => m.ExistingEquipment[0].Notes, new {@class = "form-control", placeholder = "Notes"})
                                @Html.ValidationMessageFor(m => m.ExistingEquipment[0].Notes, "", new {@class = "text-danger"})
                            </div>
                        </div>
                    </div>
            </div>
        </div>
        @if (Model?.ExistingEquipment != null && Model.ExistingEquipment.Count > 1)
        {
            for (var i = 1; i < Model.ExistingEquipment.Count; i++)
            {
                <div id="existing-equipment-@(i)">
                    <div class="dealnet-middle-header owner-info-label">
                        №@(i+1)
                        <div id="existing-equipment-remove-@(i)" class="additional-remove" onclick="$('#existing-equipment-@(i)').remove();">
                            <i class="glyphicon glyphicon-remove"></i>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 col-md-2 col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].IsRental)
                                <div class="control-group">
                                    @Html.DropDownListFor(m => m.ExistingEquipment[i].IsRental, new SelectList(
                                new[]
                                {
                                    new {Value = "true", Text = "Yes", Selected = Model?.ExistingEquipment != null && Model.ExistingEquipment[i].IsRental },
                                    new { Value = "false", Text = "No", Selected = Model?.ExistingEquipment != null && !Model.ExistingEquipment[i].IsRental },
                                },
                                "Value", "Text", Model?.ExistingEquipment != null ? Model.ExistingEquipment[i].IsRental : true), new {@class = "form-control"})
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-8 col-md-4 col-lg-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].RentalCompany)
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].RentalCompany, new { @class = "form-control dealnet-input", placeholder = "Rental Company" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].RentalCompany, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-3 col-lg-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].EstimatedAge)
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].EstimatedAge, new { @class = "form-control dealnet-input", placeholder = "Years" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].EstimatedAge, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-3 col-lg-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].Make)
                                <div class="control-group has-addon-left">
                                    <div class="control-group-addon">$</div>
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].Make, new { @class = "form-control dealnet-input", placeholder = "Make" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Make, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].Model)
                                <div class="control-group has-addon-left">
                                    <div class="control-group-addon">$</div>
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].Model, new { @class = "form-control dealnet-input", placeholder = "Model" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Model, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].SerialNumber)
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].SerialNumber, new { @class = "form-control dealnet-input", placeholder = "Serial Number" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].SerialNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].GeneralCondition)
                                <div class="control-group">
                                    @Html.TextBoxFor(m => m.ExistingEquipment[i].GeneralCondition, new { @class = "form-control dealnet-input", placeholder = "General Condition" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].GeneralCondition, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ExistingEquipment[i].Notes)
                                <div class="control-group">
                                    @Html.TextAreaFor(m => m.ExistingEquipment[i].Notes, new { @class = "form-control", placeholder = "Notes" })
                                    @Html.ValidationMessageFor(m => m.ExistingEquipment[i].Notes, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="align-middle dealnet-info-link add-equip-link" onclick="addExistingEquipment()">
                <svg aria-hidden="true" class="icon icon-add-app"><use xlink:href="@Url.Content("~/Content/images/sprite/sprite.svg#icon-add-app")"></use></svg>
                <span>Add additional equipment</span>
            </div>
        </div>
    </div>

    <h3 class="dealnet-middle-header">Additional Contract Information</h3>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(m => m.Notes)
                <div class="control-group">
                    @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", placeholder = "Contract Notes" })  
                    @Html.ValidationMessageFor(m => m.Notes, "", new {@class = "text-danger"})
                </div>                
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col-md-12">
            <div class="button-proceed">
                <input type="submit" value="Save and Proceed" class="btn dealnet-button dealnet-success-button"/>                
            </div>
        </div>        
    </div>
}
</div>
</div>

<link href="https://code.jquery.com/ui/1.12.0/themes/base/jquery-ui.css" rel="stylesheet">

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    @Scripts.Render("~/bundles/equipment-information")

    <script type="text/javascript">
        $(document)
            .ready(function () {
                sessionStorage.newEquipmets = @(Model.NewEquipment == null || !Model.NewEquipment.Any() ? 0 : Model.NewEquipment.Count -1);
                sessionStorage.existingEquipmets = @(Model.ExistingEquipment == null || !Model.ExistingEquipment.Any() ? 0 : Model.ExistingEquipment.Count -1);
                @if (Model.ExistingEquipment == null || !Model.ExistingEquipment.Any())
                {
                    <text>$("#existing-equipment-base").remove();</text>
                }
            });
    </script>
}
