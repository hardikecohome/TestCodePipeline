module.exports('newEquipment.conversion', function (require) {
    var state = require('state').state;
    var templateFactory = require('equipment-template');

    /**
     * remove equipment form list of new/existing equipments
     * and update indexs, id, names
     * in case of new equipment we recalculate our cost values
     * @param {Object<string>} options - object of predefinded values for 
     *  equipment object
     *  options.name - key in global state values [equipments, existingEquipments]
     *  options.equipmentIdPattern - common name of id value for new/existing equipment. 
     *      with this name and id we search for specific equipment [new-equipment-, existing-equipment- ]
     *  options.equipmentRemovePattern - common name of id value for removing new/existing equipment [remove-existing-equipment-, addequipment-remove-]
     *  options.equipmentName - common name of razor generated values for new/existing equipment [NewEquipment, ExistingEquipment]
     * @returns {void} 
     */
    var removeItem = function (options) {
        var fullId = $(this).attr('id');
        var id = fullId.substr(fullId.lastIndexOf('-') + 1);
        if (!state[options.name].hasOwnProperty(id)) {
            return;
        }
        $('#' + options.equipmentIdPattern + id).remove();
        delete state[options.name][id];

        var nextId = Number(id);
        for (;;) {
            nextId++;
            var nextEquipment = $('#' + options.equipmentIdPattern + nextId);
            if (!nextEquipment.length) {
                break;
            }

            //We need update all indexes for list of equipments
            //because on submitting form built-in model binder of ASP.NET MVC 
            //can't parse model without appropriate indexes, ids, names
            updateLabelIndex(nextEquipment, nextId, options.equipmentName);
            updateInputIndex(nextEquipment, nextId, options.equipmentName);
            updateValidationIndex(nextEquipment, nextId, options.equipmentName);
            updateButtonIndex(nextEquipment, nextId, options.equipmentIdPattern, options.equipmentRemovePattern);

            state[options.name][nextId].id = (nextId - 1).toString();
            state[options.name][nextId - 1] = state[options.name][nextId];
            delete state[options.name][nextId];
        }

    }

    var createItem = function (options) {
        var item = templateFactory($('<div></div>'), options);

        return item;
    }

    /**
     * update all label within div which generated by razor
     * @Html.LabelFor(x => x.) syntax
     * @param {string} selector - div within wich we update all label values 
     * @param {number} index - current index of label name we replace with previous one
     * @param {string} name - name of equipment [NewEquipment, ExistingEquipment]
     * @returns {void} 
     */
    function updateLabelIndex(selector, index, name) {
        var labels = selector.find('label');
        labels.each(function () {
            $(this).attr('for', $(this).attr('for').replace(name + '_' + index, name + '_' + (index - 1)));
        });
    }

    /**
     * update all input within div which generated by razor
     * @Html.TextBoxFor(x => x.) syntax
     * @param {string} selector - div within wich we update all label values 
     * @param {number} index - current index of label name we replace with previous one
     * @param {string} name - name of equipment [NewEquipment, ExistingEquipment]
     * @returns {void} 
     */
    function updateInputIndex(selector, index, name) {
        var inputs = selector.find('input, select, textarea');

        inputs.each(function () {
            $(this).attr('id', $(this).attr('id').replace(name + '_' + index, name + '_' + (index - 1)));
            $(this).attr('name', $(this).attr('name').replace(name + '[' + index, name + '[' + (index - 1)));
        });
    }

    /**
     * update all validation rules within div which generated by razor
     * @Html.ValidationFor(x => x.) syntax
     * With these rules jQuery unobtrusive validation knows when value is invalid
     * @param {string} selector - div within wich we update all label values 
     * @param {number} index - current index of label name we replace with previous one
     * @param {string} name - name of equipment [NewEquipment, ExistingEquipment]
     * @returns {void} 
     */
    function updateValidationIndex(selector, index, name) {
        var spans = selector.find('span');

        spans.each(function () {
            var valFor = $(this).attr('data-valmsg-for');
            if (valFor === null || valFor === undefined) {
                return;
            }
            $(this).attr('data-valmsg-for', valFor.replace(name + '[' + index, name + '[' + (index - 1)));
        });
    }

    /**
     * Update all id of buttons within div
     * @param {string} selector - div within wich we update all label values 
     * @param {number} index - current index of label name we replace with previous one
     * @param {string} equipmentPatternId - common name of id value for new/existing equipment. 
     *      with this name and id we search for specific equipment [new-equipment-, existing-equipment- ]
     * @param {string} equipmentRemovePattern - common name of id value for removing new/existing equipment [remove-existing-equipment-, addequipment-remove-]
     * @returns {void} 
     */
    function updateButtonIndex(selector, index, equipmentPatternId, equipmentRemovePattern) {
        selector.find('.equipment-number').text('№' + index);
        var removeButton = selector.find('#' + equipmentRemovePattern + index);
        removeButton.attr('id', equipmentRemovePattern + (index - 1));
        selector.attr('id', equipmentPatternId + (index - 1));
    }

    return {
        createItem: createItem,
        removeItem: removeItem
    }
})